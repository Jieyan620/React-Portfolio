{"version":3,"sources":["components/Image/1.jpg","components/Image/2.jpg","components/Image/3.jpg","components/Image/4.jpg","components/Image/5.jpg","components/tileData/tileDat.js","components/AppBar/AppBar.js","components/AboutMe/AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","tileData","img","image1","title","author","image2","image3","image4","image5","AppBar","classes","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","color","primary","light","titleBar","useStyles","className","GridList","cols","map","tile","GridListTile","key","src","alt","GridListTileBar","actionIcon","IconButton","aria-label","minWidth","bullet","margin","fontSize","pos","marginBottom","AboutMe","bull","Card","style","maxWidth","CardContent","Typography","variant","component","CardActions","Button","size","App","Fragment","CssBaseline","Container","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c1e387a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.30c1f00b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.aae973b7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.0ef2d995.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.3c2980ea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.65e76cec.jpg\";","import image1 from '../Image/1.jpg'\r\nimport image2 from '../Image/2.jpg'\r\nimport image3 from '../Image/3.jpg'\r\nimport image4 from '../Image/4.jpg'\r\nimport image5 from '../Image/5.jpg'\r\n \r\n const tileData = [\r\n  {\r\n    img: image1,\r\n    title: 'Image',\r\n    author: 'author'\r\n     },\r\n   {\r\n     img: image2,\r\n     title: 'Image',\r\n     author: 'author'\r\n   }, {\r\n     img: image3,\r\n     title: 'Image',\r\n     author: 'author'\r\n   }, {\r\n     img: image4,\r\n     title: 'Image',\r\n     author: 'author'\r\n   }, {\r\n     img: image5,\r\n     title: 'Image',\r\n     author: 'author'\r\n   }\r\n];\r\n\r\nexport default tileData","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport GridList from '@material-ui/core/GridList'\r\nimport GridListTile from '@material-ui/core/GridListTile'\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder'\r\nimport tileData from '../tileData'\r\n\r\nconst AppBar=()=>{\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n      flexWrap: 'nowrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      transform: 'translateZ(0)',\r\n    },\r\n    title: {\r\n      color: theme.palette.primary.light,\r\n    },\r\n    titleBar: {\r\n      background:\r\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n    },\r\n  }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <GridList className={classes.gridList} cols={2.5}>\r\n          {tileData.map(tile => (\r\n            <GridListTile key={tile.img}>\r\n              <img src={tile.img} alt={tile.title} />\r\n              <GridListTileBar\r\n                title={tile.title}\r\n                classes={{\r\n                  root: classes.titleBar,\r\n                  title: classes.title,\r\n                }}\r\n                actionIcon={\r\n                  <IconButton aria-label={`star ${tile.title}`}>\r\n                    <StarBorderIcon className={classes.title} />\r\n                  </IconButton>\r\n                }\r\n              />\r\n            </GridListTile>\r\n          ))}\r\n        </GridList>\r\n      </div>\r\n    );\r\n  \r\n\r\n\r\n}\r\n\r\nexport default AppBar","import React from 'react'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Container from '@material-ui/core/Container'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n})\r\n\r\n\r\nconst AboutMe = () => {\r\n\r\n  const classes = useStyles()\r\n  const bull = <span className={classes.bullet}>â€¢</span>\r\n\r\n  return (\r\n\r\n    <Card className={classes.root} style={{ backgroundColor: '#88d8b0', maxWidth:'70vh', color:'white'}}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          About{bull}Me\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Placeat non nulla at, culpa sequi libero modi. Corrupti eius sit laudantium doloremque, molestiae nulla? Minima illum inventore repudiandae laudantium sunt nihil.\r\n                <br />\r\n          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consectetur, incidunt! Ex exercitationem dolores accusamus obcaecati esse asperiores, itaque provident veniam voluptas, eos minus commodi rem ab iure nulla fuga saepe.\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\" style={{  color: 'white' }}>Learn More</Button>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n\r\n}\r\n\r\nexport default AboutMe","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\nimport AppBar from './components/AppBar'\nimport AboutMe from './components/AboutMe'\nimport './App.css'\n\nfunction App() {\n  return (\n   \n      <React.Fragment>\n        <CssBaseline />\n        <Container maxWidth=\"lm\">\n          <Typography component=\"div\" style={{ backgroundColor: '#ffeead', height: '100vh' }} >\n            <AppBar />\n            <AboutMe />\n          </Typography>\n        </Container>\n      </React.Fragment>\n     \n     \n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}